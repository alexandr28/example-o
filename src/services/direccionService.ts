// src/services/direccionService.ts - VERSI√ìN SIN ENDPOINT BASE
import { BaseApiService } from './BaseApiService';
import { Direccion, DireccionFormData } from '../models';
import { NotificationService } from '../components/utils/Notification';

/**
 * Configuraci√≥n de normalizaci√≥n para direcciones
 */
const direccionNormalizeOptions = {
  normalizeItem: (item: any): Direccion => {
    // Construir la descripci√≥n concatenada
    let descripcionParts = [];
    
    // Agregar sector
    if (item.nombreSector) {
      descripcionParts.push(item.nombreSector);
    }
    
    // Agregar barrio (solo si existe y no es null)
    if (item.nombreBarrio && item.nombreBarrio !== null && item.nombreBarrio !== '') {
      descripcionParts.push(item.nombreBarrio);
    }
    
    // Agregar v√≠a con tipo
    if (item.nombreTipoVia && item.nombreVia) {
      descripcionParts.push(`${item.nombreTipoVia} ${item.nombreVia}`);
    } else if (item.nombreVia) {
      descripcionParts.push(item.nombreVia);
    }
    
    // Agregar cuadra
    if (item.cuadra) {
      descripcionParts.push(`Cuadra ${item.cuadra}`);
    }
    
    // Unir todas las partes con espacios
    const descripcionCompleta = descripcionParts.join(' ');
    
    return {
      id: item.codDireccion || item.direccionId || item.id || 0,
      sectorId: item.codSector || item.sectorId || 0,
      barrioId: item.codBarrio || item.barrioId || 0,
      calleId: item.codVia || item.calleId || 0,
      cuadra: item.cuadra || '',
      lado: item.lado || '-',
      loteInicial: item.loteInicial || 0,
      loteFinal: item.loteFinal || 0,
      descripcion: descripcionCompleta,
      estado: item.estado === 1 || item.estado === true,
      // Datos adicionales del API
      nombreSector: item.nombreSector || '',
      nombreBarrio: item.nombreBarrio || '',
      nombreVia: item.nombreVia || '',
      nombreTipoVia: item.nombreTipoVia || '',
      codDireccion: item.codDireccion,
      codBarrioVia: item.codBarrioVia,
      codSector: item.codSector,
      codBarrio: item.codBarrio,
      codVia: item.codVia,
      // Relaciones opcionales
      sector: item.sector || undefined,
      barrio: item.barrio || undefined,
      calle: item.calle || undefined
    };
  }
};

/**
 * Interfaz para par√°metros de b√∫squeda por tipo de v√≠a
 */
interface BusquedaPorTipoViaParams {
  parametrosBusqueda: string;
  codUsuario?: number;
}

/**
 * Interfaz para par√°metros de b√∫squeda por nombre de v√≠a
 */
interface BusquedaPorNombreViaParams {
  nombreVia?: string;
  codSector?: number;
  codBarrio?: number;
}

/**
 * Servicio para manejar las operaciones de direcciones
 */
export class DireccionService extends BaseApiService<Direccion, DireccionFormData> {
  private static instance: DireccionService;
  
  constructor() {
    super(
      '', // baseURL vac√≠o para usar proxy
      '/api/direccion', // endpoint base (aunque no lo usaremos para GET)
      direccionNormalizeOptions, // opciones de normalizaci√≥n
      'direcciones_cache' // clave de cach√©
    );
  }
  
  /**
   * Obtiene la instancia singleton del servicio
   */
  static getInstance(): DireccionService {
    if (!DireccionService.instance) {
      DireccionService.instance = new DireccionService();
    }
    return DireccionService.instance;
  }

  /**
   * Obtiene todas las direcciones
   * IMPORTANTE: NO usa el endpoint base, sino el endpoint espec√≠fico de b√∫squeda
   */
  async getAll(): Promise<Direccion[]> {
    try {
      console.log('üîÑ [DireccionService] Obteniendo todas las direcciones');
      
      // Usar directamente el endpoint de b√∫squeda con par√°metros vac√≠os
      return await this.buscarPorNombreVia({
        nombreVia: '',
        codSector: 0,
        codBarrio: 0
      });
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al obtener direcciones:', error);
      
      // Si hay error, intentar devolver del cach√©
      const cached = this.loadFromCache();
      if (cached && cached.length > 0) {
        console.log(`üì¶ [DireccionService] Devolviendo ${cached.length} direcciones del cach√©`);
        return cached;
      }
      
      return [];
    }
  }
  
  /**
   * Busca direcciones por tipo de v√≠a
   */
  async buscarPorTipoVia(params: BusquedaPorTipoViaParams): Promise<Direccion[]> {
    try {
      console.log('üîç [DireccionService] Buscando direcciones por tipo de v√≠a:', params);
      
      const queryParams = new URLSearchParams({
        parametrosBusqueda: params.parametrosBusqueda,
        ...(params.codUsuario && { codUsuario: params.codUsuario.toString() })
      });
      
      // IMPORTANTE: URL relativa para que funcione el proxy
      const url = `/api/direccion/listarDireccionPorTipoVia?${queryParams}`;
      
      const response = await this.makeRequest(url, {
        method: 'GET'
      });
      
      // Manejo de respuesta seg√∫n estructura del API
      let dataArray: any[] = [];
      
      if (response && response.data && Array.isArray(response.data)) {
        dataArray = response.data;
      } else if (Array.isArray(response)) {
        dataArray = response;
      } else {
        console.warn('‚ö†Ô∏è [DireccionService] Estructura de respuesta no reconocida:', response);
        dataArray = [];
      }
      
      const direcciones = dataArray.map((item: any, index: number) => 
        this.normalizeOptions.normalizeItem(item, index)
      );
      
      console.log(`‚úÖ [DireccionService] ${direcciones.length} direcciones encontradas por tipo de v√≠a`);
      return direcciones;
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al buscar por tipo de v√≠a:', error);
      return [];
    }
  }
  
  /**
   * Busca direcciones por nombre de v√≠a
   * Este es el m√©todo principal para listar direcciones
   */
  async buscarPorNombreVia(params?: BusquedaPorNombreViaParams): Promise<Direccion[]> {
    try {
      console.log('üîç [DireccionService] Buscando direcciones por nombre de v√≠a:', params || 'sin par√°metros');
      
      // IMPORTANTE: URL relativa para que funcione el proxy
      let url = '/api/direccion/listarDireccionPorNombreVia';
      
      // Siempre agregar par√°metros para evitar error 403
      const queryParams = new URLSearchParams();
      
      // Usar valores por defecto si no se proporcionan
      queryParams.append('nombreVia', params?.nombreVia || '');
      queryParams.append('codSector', (params?.codSector || 0).toString());
      queryParams.append('codBarrio', (params?.codBarrio || 0).toString());
      
      url += `?${queryParams}`;
      
      console.log(`üì° [DireccionService] URL final: ${url}`);
      
      const response = await this.makeRequest(url, {
        method: 'GET'
      });
      
      // Seg√∫n la imagen del API, la respuesta tiene estructura: { success, message, data: [...] }
      let dataArray: any[] = [];
      
      if (response && response.data && Array.isArray(response.data)) {
        dataArray = response.data;
      } else if (Array.isArray(response)) {
        dataArray = response;
      } else {
        console.warn('‚ö†Ô∏è [DireccionService] Estructura de respuesta no reconocida:', response);
        dataArray = [];
      }
      
      const direcciones = dataArray.map((item: any, index: number) => 
        this.normalizeOptions.normalizeItem(item, index)
      );
      
      console.log(`‚úÖ [DireccionService] ${direcciones.length} direcciones encontradas`);
      
      // Guardar en cach√© si hay resultados
      if (direcciones.length > 0) {
        this.saveToCache(direcciones);
      }
      
      return direcciones;
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al buscar por nombre de v√≠a:', error);
      
      // Si hay error, intentar devolver del cach√©
      const cached = this.loadFromCache();
      if (cached && cached.length > 0) {
        console.log(`üì¶ [DireccionService] Error en b√∫squeda, devolviendo ${cached.length} direcciones del cach√©`);
        return cached;
      }
      
      return [];
    }
  }
  
  /**
   * Crea una nueva direcci√≥n (requiere Bearer Token)
   * IMPORTANTE: Usa un endpoint espec√≠fico para crear, no el base
   */
  async create(data: DireccionFormData): Promise<Direccion> {
    try {
      console.log('üì§ [DireccionService] Creando nueva direcci√≥n:', data);
      
      const token = this.getAuthToken();
      if (!token) {
        NotificationService.error('Debe iniciar sesi√≥n para guardar direcciones');
        throw new Error('No se encontr√≥ token de autenticaci√≥n');
      }
      
      // USAR UN ENDPOINT ESPEC√çFICO PARA CREAR
      // Asumiendo que existe un endpoint como /api/direccion/crear o similar
      // Si no existe, necesitar√°s verificar con el backend cu√°l es el endpoint correcto
      const createUrl = '/api/direccion/crear';
      
      const response = await this.makeRequest(createUrl, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      const direccion = this.normalizeOptions.normalizeItem(response, 0);
      
      NotificationService.success('Direcci√≥n creada exitosamente');
      console.log('‚úÖ [DireccionService] Direcci√≥n creada:', direccion);
      
      // Actualizar cach√© agregando la nueva direcci√≥n
      const cached = this.loadFromCache() || [];
      cached.push(direccion);
      this.saveToCache(cached);
      
      return direccion;
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al crear direcci√≥n:', error);
      
      // Si el endpoint /crear no existe, mostrar mensaje espec√≠fico
      if (error.message?.includes('404')) {
        NotificationService.error('El endpoint para crear direcciones no est√° disponible. Contacte al administrador.');
      } else {
        NotificationService.error(error.message || 'Error al crear direcci√≥n');
      }
      
      throw error;
    }
  }
  
  /**
   * Actualiza una direcci√≥n existente (requiere Bearer Token)
   */
  async update(id: number, data: DireccionFormData): Promise<Direccion> {
    try {
      console.log('üìù [DireccionService] Actualizando direcci√≥n:', id, data);
      
      const token = this.getAuthToken();
      if (!token) {
        NotificationService.error('Debe iniciar sesi√≥n para actualizar direcciones');
        throw new Error('No se encontr√≥ token de autenticaci√≥n');
      }
      
      // Usar endpoint espec√≠fico para actualizar
      const updateUrl = `/api/direccion/actualizar/${id}`;
      
      const response = await this.makeRequest(updateUrl, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });
      
      const direccion = this.normalizeOptions.normalizeItem(response, 0);
      
      NotificationService.success('Direcci√≥n actualizada exitosamente');
      console.log('‚úÖ [DireccionService] Direcci√≥n actualizada:', direccion);
      
      // Actualizar cach√©
      const cached = this.loadFromCache() || [];
      const index = cached.findIndex(d => d.id === id);
      if (index !== -1) {
        cached[index] = direccion;
        this.saveToCache(cached);
      }
      
      return direccion;
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al actualizar direcci√≥n:', error);
      NotificationService.error(error.message || 'Error al actualizar direcci√≥n');
      throw error;
    }
  }
  
  /**
   * Elimina una direcci√≥n (requiere Bearer Token)
   */
  async delete(id: number): Promise<boolean> {
    try {
      console.log('üóëÔ∏è [DireccionService] Eliminando direcci√≥n:', id);
      
      const token = this.getAuthToken();
      if (!token) {
        NotificationService.error('Debe iniciar sesi√≥n para eliminar direcciones');
        throw new Error('No se encontr√≥ token de autenticaci√≥n');
      }
      
      // Usar endpoint espec√≠fico para eliminar
      const deleteUrl = `/api/direccion/eliminar/${id}`;
      
      await this.makeRequest(deleteUrl, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      NotificationService.success('Direcci√≥n eliminada exitosamente');
      console.log('‚úÖ [DireccionService] Direcci√≥n eliminada');
      
      // Actualizar cach√© eliminando la direcci√≥n
      const cached = this.loadFromCache() || [];
      const filtered = cached.filter(d => d.id !== id);
      this.saveToCache(filtered);
      
      return true;
      
    } catch (error: any) {
      console.error('‚ùå [DireccionService] Error al eliminar direcci√≥n:', error);
      NotificationService.error(error.message || 'Error al eliminar direcci√≥n');
      throw error;
    }
  }
  
  /**
   * Busca direcciones con filtro
   */
  async search(term: string): Promise<Direccion[]> {
    try {
      // Usar b√∫squeda por nombre de v√≠a
      return await this.buscarPorNombreVia({
        nombreVia: term,
        codSector: 0,
        codBarrio: 0
      });
    } catch (error) {
      console.error('‚ùå [DireccionService] Error en b√∫squeda:', error);
      return [];
    }
  }
}

// Exportar instancia singleton
export const direccionService = DireccionService.getInstance();

// Exportar tambi√©n la clase para testing
export default DireccionService;