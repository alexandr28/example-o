// src/hooks/useSectores.ts - DETECCI√ìN DE DATOS REALES CORREGIDA
import { useState, useCallback, useEffect } from 'react';
import { Sector, SectorFormData } from '../models/Sector';
import SectorService from '../services/sectorService';
import { connectivityService } from '../services/connectivityService';
import { MockSectorService } from '../services/mockSectorService';

export const useSectores = () => {
  const [sectores, setSectores] = useState<Sector[]>([]);
  const [sectorSeleccionado, setSectorSeleccionado] = useState<Sector | null>(null);
  const [modoEdicion, setModoEdicion] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [isOfflineMode, setIsOfflineMode] = useState(false);

  // üîß FUNCI√ìN CORREGIDA para detectar datos reales
  const esDataReal = (data: Sector[]): boolean => {
    if (!data || data.length === 0) {
      console.log('üîç [useSectores] esDataReal: No hay datos');
      return false;
    }
    
    console.log('üîç [useSectores] Verificando si es data real...');
    console.log('üîç [useSectores] Datos a verificar:', data);
    
    // Lista de nombres que sabemos que son de mock/gen√©ricos
    const nombresMock = [
      /^Sector \d+$/,                    // "Sector 1", "Sector 2", etc.
      /^Sector \d+ \(datos inv√°lidos\)/, // "Sector 1 (datos inv√°lidos)"
      /^SECTOR JERUSAL√âN$/,              // Mock espec√≠fico
      /^URB\. MANUEL AR√âVALO II$/,       // Mock espec√≠fico
      /^PARQUE INDUSTRIAL$/,             // Mock espec√≠fico (este podr√≠a ser real tambi√©n)
      /^SECTOR CENTRAL$/,                // Mock espec√≠fico (este podr√≠a ser real tambi√©n)
      /^LOS JARDINES$/                   // Mock espec√≠fico
    ];
    
    // Verificar cada sector
    const resultados = data.map((sector, index) => {
      const nombre = sector.nombre?.trim() || '';
      console.log(`üîç [useSectores] Verificando sector ${index}: "${nombre}"`);
      
      if (!nombre) {
        console.log(`‚ùå [useSectores] Sector ${index} sin nombre`);
        return false;
      }
      
      // Verificar si el nombre coincide con alg√∫n patr√≥n de mock
      const esMock = nombresMock.some(patron => patron.test(nombre));
      console.log(`üîç [useSectores] Sector ${index} "${nombre}" es mock: ${esMock}`);
      
      // Si NO es mock y tiene un nombre v√°lido, es dato real
      const esReal = !esMock && nombre.length > 3;
      console.log(`‚úÖ [useSectores] Sector ${index} "${nombre}" es real: ${esReal}`);
      
      return esReal;
    });
    
    // Si al menos uno es real, entonces los datos son reales
    const tieneAlgunReal = resultados.some(esReal => esReal);
    
    console.log('üîç [useSectores] Resultados de verificaci√≥n:', resultados);
    console.log('üîç [useSectores] ¬øTiene alg√∫n dato real?:', tieneAlgunReal);
    
    // CRITERIO M√ÅS FLEXIBLE: Si tenemos datos que NO son exactamente los del mock, son reales
    if (!tieneAlgunReal) {
      // Verificaci√≥n adicional: comparar con datos mock conocidos
      const mockConocidos = [
        'SECTOR JERUSAL√âN',
        'URB. MANUEL AR√âVALO II', 
        'PARQUE INDUSTRIAL',
        'SECTOR CENTRAL',
        'LOS JARDINES'
      ];
      
      // Si los nombres son diferentes a los mock conocidos, son reales
      const sonDiferentes = data.some(sector => {
        const nombre = sector.nombre?.trim() || '';
        return nombre && !mockConocidos.includes(nombre) && !nombre.match(/^Sector \d+/);
      });
      
      console.log('üîç [useSectores] ¬øSon diferentes a mock conocidos?:', sonDiferentes);
      return sonDiferentes;
    }
    
    return tieneAlgunReal;
  };

  // Cargar sectores con detecci√≥n mejorada
  const cargarSectores = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üöÄ [useSectores] Iniciando carga de sectores...');
      
      let data: Sector[];
      let sourceName = "";
      let esApiReal = false;
      
      // SIEMPRE intentar API primero
      try {
        console.log('üîÑ [useSectores] Cargando desde API...');
        data = await SectorService.getAll();
        
        console.log('üìä [useSectores] Datos recibidos de API:', data);
        
        // ‚ö†Ô∏è CAMBIO IMPORTANTE: SIEMPRE considerar datos de API como reales
        // Si la API responde con datos v√°lidos, son reales por definici√≥n
        if (data && Array.isArray(data) && data.length > 0) {
          // Verificar que los datos tengan estructura v√°lida
          const datosValidos = data.every(sector => 
            sector && 
            typeof sector === 'object' && 
            sector.nombre && 
            typeof sector.nombre === 'string' &&
            sector.nombre.trim() !== ''
          );
          
          if (datosValidos) {
            esApiReal = true;
            sourceName = "API Real";
            setIsOfflineMode(false);
            console.log('‚úÖ [useSectores] Datos V√ÅLIDOS de API confirmados como reales');
          } else {
            console.warn('‚ö†Ô∏è [useSectores] Datos de API con estructura inv√°lida');
            throw new Error('Datos de API con estructura inv√°lida');
          }
        } else {
          console.warn('‚ö†Ô∏è [useSectores] API devolvi√≥ datos vac√≠os o inv√°lidos');
          throw new Error('API devolvi√≥ datos vac√≠os');
        }
        
      } catch (apiError: any) {
        console.error('‚ùå [useSectores] Error al cargar desde API:', apiError);
        
        // Solo usar mock si hay error de conexi√≥n real
        console.log('üîÑ [useSectores] Usando mock como fallback');
        data = await MockSectorService.getAll();
        sourceName = "Mock (error de API)";
        setIsOfflineMode(true);
        esApiReal = false;
      }
      
      console.log(`üìä [useSectores] Datos finales de ${sourceName}:`, data);
      
      if (!data || !Array.isArray(data)) {
        console.error('‚ùå [useSectores] Los datos no son un array v√°lido:', data);
        data = [];
      }
      
      setSectores(data);
      
      // Actualizar estado de conexi√≥n
      if (esApiReal) {
        setIsOfflineMode(false);
        console.log('‚úÖ [useSectores] Modo ONLINE confirmado');
      } else {
        setIsOfflineMode(true);
        console.log('‚ö†Ô∏è [useSectores] Modo OFFLINE confirmado');
      }
      
    } catch (err: any) {
      console.error('‚ùå [useSectores] Error general:', err);
      setError(err.message || 'Error al cargar los sectores');
      
      // √öltimo recurso: mock
      try {
        const mockData = await MockSectorService.getAll();
        setSectores(mockData);
        setIsOfflineMode(true);
      } catch (mockError) {
        console.error('‚ùå [useSectores] Error con mock service:', mockError);
        setSectores([]);
      }
    } finally {
      setLoading(false);
    }
  }, []);

  // Funci√≥n para forzar modo online
  const forzarModoOnline = useCallback(async () => {
    console.log('üîÑ [useSectores] FORZANDO modo online...');
    
    try {
      setLoading(true);
      setError(null);
      
      // Forzar carga desde API
      console.log('üöÄ [useSectores] Forzando carga desde API...');
      const data = await SectorService.getAll();
      
      console.log('üìä [useSectores] Datos forzados de API:', data);
      
      if (data && Array.isArray(data) && data.length > 0) {
        setSectores(data);
        setIsOfflineMode(false);
        console.log('‚úÖ [useSectores] Modo online FORZADO exitosamente');
      } else {
        throw new Error('API no devolvi√≥ datos v√°lidos');
      }
      
    } catch (error) {
      console.error('‚ùå [useSectores] Error al forzar modo online:', error);
      setError('Error al forzar modo online');
      throw error;
    } finally {
      setLoading(false);
    }
  }, []);

  // Test de conexi√≥n API
  const testApiConnection = useCallback(async (): Promise<boolean> => {
    try {
      console.log('üß™ [useSectores] Probando conexi√≥n con API...');
      
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 5000);
      
      const response = await fetch('http://localhost:8080/api/sector', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
        mode: 'cors',
        credentials: 'omit',
        signal: controller.signal
      });
      
      clearTimeout(timeoutId);
      
      console.log('üß™ [useSectores] Test response:', response.status, response.statusText);
      
      if (response.ok) {
        const text = await response.text();
        console.log('üß™ [useSectores] Test content preview:', text.substring(0, 100));
        
        try {
          const json = JSON.parse(text);
          console.log('üß™ [useSectores] Test data parsed:', json);
          
          // Si es un array v√°lido con datos, la API funciona
          const funcionaCorrectamente = Array.isArray(json) && json.length > 0;
          console.log('üß™ [useSectores] ¬øAPI funciona correctamente?:', funcionaCorrectamente);
          
          return funcionaCorrectamente;
        } catch (e) {
          console.log('üß™ [useSectores] Test data no es JSON v√°lido');
          return false;
        }
      }
      
      return false;
    } catch (error) {
      console.error('üß™ [useSectores] Error en test de conexi√≥n:', error);
      return false;
    }
  }, []);

  // Ejecutar test al montar
  useEffect(() => {
    testApiConnection().then(isConnected => {
      console.log('üåê [useSectores] Test inicial de conexi√≥n:', isConnected ? 'CONECTADO' : 'DESCONECTADO');
    });
  }, [testApiConnection]);

  const seleccionarSector = useCallback((sector: Sector) => {
    setSectorSeleccionado(sector);
    setModoEdicion(true);
  }, []);

  const limpiarSeleccion = useCallback(() => {
    setSectorSeleccionado(null);
    setModoEdicion(false);
  }, []);

  // Guardar sector
  const guardarSector = useCallback(async (data: SectorFormData) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üíæ [useSectores] Guardando sector:', data);
      
      let result: Sector;
      let sourceUsed = "";
      
      // SIEMPRE intentar API primero
      try {
        console.log('üîÑ [useSectores] Intentando guardar en API...');
        
        if (modoEdicion && sectorSeleccionado) {
          result = await SectorService.update(sectorSeleccionado.id, data);
        } else {
          result = await SectorService.create(data);
        }
        
        sourceUsed = "API Real";
        setIsOfflineMode(false);
        console.log('‚úÖ [useSectores] Guardado exitoso en API');
        
      } catch (apiError: any) {
        console.error('‚ùå [useSectores] Error al guardar en API:', apiError);
        
        // Solo usar mock en caso de error real
        if (modoEdicion && sectorSeleccionado) {
          result = await MockSectorService.update(sectorSeleccionado.id, data);
        } else {
          result = await MockSectorService.create(data);
        }
        sourceUsed = "MockService (fallback)";
        setIsOfflineMode(true);
      }
      
      console.log(`‚úÖ [useSectores] Sector guardado con ${sourceUsed}:`, result);
      
      // Actualizar estado local
      if (modoEdicion && sectorSeleccionado) {
        setSectores(prev => prev.map(s => s.id === sectorSeleccionado.id ? result : s));
      } else {
        setSectores(prev => [...prev, result]);
      }
      
      limpiarSeleccion();
      return result;
      
    } catch (err: any) {
      console.error('‚ùå [useSectores] Error en guardarSector:', err);
      setError(err.message || 'Error al guardar el sector');
      throw err;
    } finally {
      setLoading(false);
    }
  }, [modoEdicion, sectorSeleccionado, limpiarSeleccion]);

  const eliminarSector = useCallback(async (id: number) => {
    try {
      setLoading(true);
      setError(null);
      
      try {
        await SectorService.delete(id);
        setIsOfflineMode(false);
        console.log('‚úÖ [useSectores] Eliminado con API');
      } catch (apiError) {
        console.error('‚ùå [useSectores] Error al eliminar en API:', apiError);
        await MockSectorService.delete(id);
        setIsOfflineMode(true);
        console.log('‚úÖ [useSectores] Eliminado con mock');
      }
      
      setSectores(prev => prev.filter(s => s.id !== id));
      
      if (sectorSeleccionado?.id === id) {
        limpiarSeleccion();
      }
      
    } catch (err: any) {
      console.error('‚ùå [useSectores] Error al eliminar:', err);
      setError(err.message || 'Error al eliminar el sector');
    } finally {
      setLoading(false);
    }
  }, [sectorSeleccionado, limpiarSeleccion]);

  const sincronizarManualmente = useCallback(async () => {
    console.log('üîÑ [useSectores] Sincronizaci√≥n manual');
    const isConnected = await testApiConnection();
    if (isConnected) {
      await cargarSectores();
    }
  }, [testApiConnection, cargarSectores]);

  return {
    sectores,
    sectorSeleccionado,
    modoEdicion,
    loading,
    error,
    isOfflineMode,
    hasPendingChanges: false,
    pendingChangesCount: 0,
    cargarSectores,
    seleccionarSector,
    limpiarSeleccion,
    guardarSector,
    eliminarSector,
    setModoEdicion,
    sincronizarManualmente,
    forzarModoOnline,
    testApiConnection,
  };
};